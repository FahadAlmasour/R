# Load packages ----
# Install once, but initialize each time you start a new session
# We'll come back to this packages soon later on. I put this
# command here since it's good practice to list all your used
# packages at the beginning of a script
library(tidyverse)
# Basic R syntax ----
# What does this command do?
n <- log2(8)
# A built-in data set ----
PlantGrowth # already available in base R
data(PlantGrowth) # This will make it appear in your environment
# We're going to do something quite modern in R, which is to use a
# tibble instead of a data.frame. That doesn't mean anything to you
# now, but we'll get to it soon.
# First, make sure you have the tidyverse package installed and
# that you have executed the library(tidyverse) command
# above, after installing, so that you have initialized the package.
PlantGrowth <- as_tibble(PlantGrowth) # convert this to a "tibble" (more on this later)
# Let's review the two most common syntax paradigms in R
# (This is kind of like different dialects of the same language,
#  some things are the same or very similar but there are key
#  differences that make them distinct systems.)
# Typical base pkg syntax
mean(PlantGrowth$weight)
# Tidyverse syntax
PlantGrowth$weight %>%
mean()
# %>% says take the object on the left (i.e. a dataframe) and insert it
source('~/Downloads/Misk_Learn_R_Solutions-main/2_1_1 - R Basics basics and case study.R')
source('~/Downloads/Misk_Learn_R_Solutions-main/2_1_1 - R Basics basics and case study.R', echo=TRUE)
# 2. Data Visualization ----
# 2. Data Visualization ----
# Here, using functions from ggplot2, a part of the Tidyverse
# 2. Data Visualization ----
# Here, using functions from ggplot2, a part of the Tidyverse
# 3 essential components
# 2. Data Visualization ----
# Here, using functions from ggplot2, a part of the Tidyverse
# 3 essential components
# 1 - The data
# 2. Data Visualization ----
# Here, using functions from ggplot2, a part of the Tidyverse
# 3 essential components
# 1 - The data
# 2 - Aesthetics - "mapping" variables onto scales
# 2. Data Visualization ----
# Here, using functions from ggplot2, a part of the Tidyverse
# 3 essential components
# 1 - The data
# 2 - Aesthetics - "mapping" variables onto scales
# scales: x, y, color, size, shape, linetype
# 3. Inferential Statistics ----
# 3. Inferential Statistics ----
# first step: define a linear model
# For all pair-wise comparisons use:
# For all pair-wise comparisons use:
# For all pair-wise comparisons use:
# For all pair-wise comparisons use:
# For all pair-wise comparisons use:
# For all pair-wise comparisons use:
# For all pair-wise comparisons use:
# For all pair-wise comparisons use:
# BEDMAS - order of operations
# brackets, expon, div, mult, add, sub
# How are these different?
2 - 3/4
(2 - 3)/4
# Use objects in place of numbers
n <- 34
p <- 6
# so...
n + p
# i.e. Can you tell the difference in these function calls?
# Which ones work and which one will produce an error?
log(x = 8, base = 2)
log(8, 2)
log(8, base = 2)
log2(8)
log(base = 2, 8)
# As an aside: recall, everything is a function...
# How is + a function?
p + n
# this is actually...
`+`(p, n)
# seq() for a regular sequence of numbers ----
seq(from = 1, to = 100, by = 7)
foo1
# The colon operator ----
# regular sequence of 1 interval
seq(1, 10, 1)
# Use the colon operator instead:
1:10
# Exercise: Are these transformation or aggregation?
# DON't execute the commands, try to guess what the output will be!
foo2 + 100 #
foo2 + foo2 #
sum(foo2) + foo2 #
1:3 + foo2 #
# FUNDAMENTAL CONCEPT: VECTOR RECYCLING ----
1:4 + foo2
# Vectors - 1-dimensional, homogenous ----
# Everything in the values section
foo1
myNames
# check
typeof(foo1)
typeof(myNames)
# Let's make some more vectors for later on:
foo3 <- c("Liver", "Brain", "Testes", "Muscle",
"Intestine", "Heart")
typeof(foo3)
foo4 <- c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE)
typeof(foo4)
# Homogeneous types:
test <- c(1:10, "bob")
test
typeof(test)
# We can't do math:
mean(test)
# Solution: Coercion to another type
# use an as.*() function
test <- as.numeric(test)
test
# Now we can do math:
mean(test)
# but we need to deal with the NA
mean(test, na.rm = TRUE)
# Lists - 1-dimensional, heterogeneous ----
typeof(plant_lm)
# how many elements:
length(plant_lm)
length(foo1) # also works for vectors
# attributes (meta data)
attributes(plant_lm)
# use common "accessor" functions for attributes
names(plant_lm)
# Anything that's named can be called with $
plant_lm$coefficients # a 3-element named dbl (numeric) vector
plant_lm$residuals # a 30-element dbl vector
plant_lm$model # data.frame
# As an aside: You can even add comments:
comment(plant_lm) <- "I love R!"
attributes(plant_lm)
# Add comment as an actual list item:
plant_lm$myComment <- "But python also :)"
plant_lm$myComment
# What is class?
# An attribute to an object
attributes(plant_lm)
# can also access with "accessor" function:
class(plant_lm)
class(plant_aov)
# class tells R functions what to do with this object
# e.g.
summary(plant_lm) # get t-test and ANOVA summary from an "lm"
summary(PlantGrowth) # summarise each column in a "dataframe"
# Dataframes - 2-dimensional, heterogenous ----
class(PlantGrowth)
# A special class of type list...
typeof(PlantGrowth)
# Make a data frame from scratch using data.frame(), or...
# You can use the modern variant
# Note, I put _df on the end of the name to remind us that this is a
# data frame (well, a tibble), but it's not necessary.
foo_df <- tibble(foo4, foo3, foo2)
foo_df
# To modify the column names, what you're actually doing is
# Change an attribute (think metadata). The most common attributes
# can be accessed with accessor functions, in this case names()
names(foo_df) <- myNames
foo_df
# How can you call each variable (i.e. column) by name:
# Basic functions:
# How about just the number of columns?
# How about just the number of columns?
# How about just the number of columns?
# How about just the number of columns?
# How about just the number of columns?
# How about just the number of columns?
# How about just the number of columns?
# How about just the number of columns?
# Plus we have a special case in R:
# !x, where x is a logical vector, give the negation of x
!c(T, F, T, T, T)
# Plus we have a special case in R:
# !x, where x is a logical vector, give the negation of x
!c(T, F, T, T, T)
# Plus we have a special case in R:
# !x, where x is a logical vector, give the negation of x
!c(T, F, T, T, T)
# Plus we have a special case in R:
# !x, where x is a logical vector, give the negation of x
!c(T, F, T, T, T)
# Plus we have a special case in R:
# !x, where x is a logical vector, give the negation of x
!c(T, F, T, T, T)
# Plus we have a special case in R:
# !x, where x is a logical vector, give the negation of x
!c(T, F, T, T, T)
# Plus we have a special case in R:
# !x, where x is a logical vector, give the negation of x
!c(T, F, T, T, T)
# Plus we have a special case in R:
# !x, where x is a logical vector, give the negation of x
!c(T, F, T, T, T)
# What if... our query was in a vector?
query <- c("Heart", "Liver")
# to compare, NEVER DO THIS!!!
# This doesn't work:
foo_df %>%
filter(tissue == query)
# But this does: i.e. reverse the query
foo_df %>%
filter(tissue == rev(query))
# Vectors (1-dimensional) ----
# Using this vector:
foo1
foo1[foo1 < 45] # All values less than 45
# So what happened here:
foo1 < 45 # produces a logical vector,
# Remember, this will ALWAYS be the case when you see a
# relational or logical operator
# Then we use that logical vector to select only the TRUE positions:
foo1[foo1 < 45]
# Data frames (2-dimensional) ----
# so use [ <rows> , <cols> ]
# Using this data frame:
foo_df
# What happens if we have a tibble?
foo_df <- as.data.frame(foo_df)
class(foo_df)
foo_df
# ok, but let's go back to a tibble
foo_df <- as_tibble(foo_df)
# We can also use names:
foo_df[,"healthy"]
# But don't forget logical vectors:
# How can we do this using the tidyverse way?
# How can we do this using the tidyverse way?
# Get a play data set:
PlayData <- read_tsv("data/PlayData.txt")
# Let's see the scenarios we discussed in class:
# For the other scenarios, tidy data would be a
# For the other scenarios, tidy data would be a
# better starting point:
# Scenario 2: Transformation across time 1 & 2 (group by type & key)
# Scenario 2: Transformation across time 1 & 2 (group by type & key)
# Difference from time 1 to time 2 for each type and key (time2 - time1)
# Scenario 3: Transformation across type A & B
# Scenario 3: Transformation across type A & B
# Ratio of A/B for each time and key
# Scenario 3: Transformation across type A & B
# Ratio of A/B for each time and key
# Scenario 3: Transformation across type A & B
# Ratio of A/B for each time and key
# Scenario 3: Transformation across type A & B
# Ratio of A/B for each time and key
# 2.1.6 tidyverse - Grammar of Data Analysis
# Using the tidy PlayData dataframe, try to compute an aggregation function
glimpse(PlantGrowth)
# Notice that the levels are printed:
PlantGrowth$group
typeof(PlantGrowth$group) # integer
class(PlantGrowth$group) # factor
# e.g.
str(PlantGrowth)
# Main problem: In pre R 4.0:
# doing math on factors and coercion
test <- c(23:26, "bob")
test
# Old behavior when making a data frame: chr become fct
test_df <- data.frame(test, stringsAsFactors = TRUE)
test_df$test
# But tibbles won't switch types:
test_tb <- tibble(test)
test_tb$test
# But if you do have a factor, coercion is difficult
mean(test_df$test)
# Solution:
as.numeric(test_df$test) # no!
# First coerce to chr
as.numeric(as.character(test_df$test))
# Change levels easily:
levels(PlantGrowth$group) <- c("Control", "Fertilizer A", "Fertilizer B")
PlantGrowth
PlantGrowth$group
# Reorder levels easily:
PlantGrowth$group <- factor(PlantGrowth$group, c("Fertilizer A", "Fertilizer B", "Control"))
PlantGrowth
PlantGrowth$group
savehistory("~/Downloads/Misk_Learn_R_Solutions-main/Untitled.Rhistory")
